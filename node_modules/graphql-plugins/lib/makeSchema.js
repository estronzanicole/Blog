"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const definition_1 = require("graphql/type/definition");
const graphql_1 = require("graphql");
const mergeExtensions_1 = require("./mergeExtensions");
function makeSchema(typeDefs, resolvers) {
    const schema = buildCompleteSchema(typeDefs);
    assignResolvers(schema, resolvers);
    return schema;
}
exports.makeSchema = makeSchema;
function buildCompleteSchema(source, options) {
    return graphql_1.buildASTSchema(mergeExtensions_1.mergeExtensions(graphql_1.parse(source, options)), options);
}
exports.buildCompleteSchema = buildCompleteSchema;
function assignResolvers(schema, resolvers) {
    const rTypeNames = Object.getOwnPropertyNames(resolvers);
    for (const typeName of rTypeNames) {
        const typeResolvers = resolvers[typeName];
        const type = schema.getType(typeName);
        if (type instanceof definition_1.GraphQLObjectType) {
            const typeFields = type.getFields();
            const resolverNames = Object.getOwnPropertyNames(typeResolvers);
            for (const resolverName of resolverNames) {
                const resolver = typeResolvers[resolverName];
                const typeField = typeFields[resolverName];
                if (typeField) {
                    if (typeof resolver === 'function') {
                        typeField.resolve = resolver;
                    }
                    else if (typeof resolver === 'object' && typeof resolver.resolve === 'function') {
                        typeField.resolve = resolver.resolve;
                        typeField.subscribe = resolver.subscribe;
                    }
                    else {
                        throw new Error('Invalid resolver of type: ' + typeof resolver);
                    }
                }
            }
        }
        else if (type instanceof definition_1.GraphQLInterfaceType || type instanceof definition_1.GraphQLUnionType) {
            type.resolveType = typeResolvers;
        }
        else if (type instanceof definition_1.GraphQLScalarType) {
            type.serialize = typeResolvers.serialize;
            if (typeResolvers.parseValue) {
                type.parseValue = typeResolvers.parseValue;
            }
            if (typeResolvers.parseLiteral) {
                type.parseLiteral = typeResolvers.parseLiteral;
            }
        }
        else if (type instanceof definition_1.GraphQLEnumType) {
            const trNames = Object.getOwnPropertyNames(typeResolvers);
            for (const resolverName of trNames) {
                type.getValue(resolverName).value = typeResolvers[resolverName];
                const valueLookup = type._valueLookup;
                valueLookup.set(typeResolvers[resolverName], valueLookup.get(resolverName));
            }
        }
        else {
            console.warn('Unsupported resolver for type: ' + typeName);
        }
    }
}
exports.assignResolvers = assignResolvers;
//# sourceMappingURL=makeSchema.js.map