import { GraphQLSchema } from 'graphql';
import { GraphQLFieldResolver } from 'graphql/type/definition';
import { DocumentNode } from 'graphql/language/ast';
import Maybe from 'graphql/tsutils/Maybe';
export declare type CancellationToken = () => boolean;
export interface SubscribeArgs {
    document: DocumentNode;
    rootValue?: any;
    contextValue?: any;
    variableValues?: Maybe<{
        [key: string]: any;
    }>;
    operationName?: Maybe<string>;
    fieldResolver?: Maybe<GraphQLFieldResolver<any, any>>;
    subscribeFieldResolver?: Maybe<GraphQLFieldResolver<any, any>>;
}
export interface SubscribeArgsFull extends SubscribeArgs {
    schema: GraphQLSchema;
}
export declare class SubscriptionManager {
    private readonly schema;
    private subscriptions;
    constructor(schema: GraphQLSchema);
    subscribe(args: SubscribeArgs, feedHandler: (any: any) => void): Promise<CancellationToken>;
    unsubscribeAll(): void;
}
