"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const makeSchema_1 = require("./makeSchema");
const QueryPluginManager_1 = require("./PluginManagers/QueryPluginManager");
const ResolverPluginManager_1 = require("./PluginManagers/ResolverPluginManager");
const ResolveTypePluginManager_1 = require("./PluginManagers/ResolveTypePluginManager");
const ScalarPluginManager_1 = require("./PluginManagers/ScalarPluginManager");
const EnumPluginManager_1 = require("./PluginManagers/EnumPluginManager");
const ResolversPluginManager_1 = require("./PluginManagers/ResolversPluginManager");
function assembleSchema(pluginDiscovery, options) {
    const schemaData = assembleSchemaData(pluginDiscovery, options);
    schemaData.schema = makeSchema_1.makeSchema(schemaData.typeDefs, schemaData.resolvers);
    return schemaData;
}
exports.assembleSchema = assembleSchema;
function assembleSchemaData(pluginDiscovery, options) {
    const queryPluginManager = new QueryPluginManager_1.QueryPluginManager(pluginDiscovery);
    const mutationPluginManager = new QueryPluginManager_1.MutationPluginManager(pluginDiscovery);
    const subscriptionPluginManager = new QueryPluginManager_1.SubscriptionPluginManager(pluginDiscovery);
    const resolverPluginManager = new ResolverPluginManager_1.ResolverPluginManager(pluginDiscovery);
    const resolversPluginManager = new ResolversPluginManager_1.ResolversPluginManager(pluginDiscovery);
    const interfacePluginManager = new ResolveTypePluginManager_1.ResolveTypePluginManager(pluginDiscovery);
    const scalarPluginManager = new ScalarPluginManager_1.ScalarPluginManager(pluginDiscovery);
    const enumPluginManager = new EnumPluginManager_1.EnumPluginManager(pluginDiscovery);
    const queryDefinition = queryPluginManager.getBuild(options);
    const mutationDefinition = mutationPluginManager.getBuild(options);
    const subscriptionDefinition = subscriptionPluginManager.getBuild(options);
    const resolverDefinitions = resolverPluginManager.getResolvers(options);
    const resolversDefinition = resolversPluginManager.getBuild(options);
    const interfaceDefinitions = interfacePluginManager.getResolvers(options);
    const scalarDefinition = scalarPluginManager.getBuild(options);
    const enumDefinitions = enumPluginManager.getEnumDefs(options);
    const queriesSubTypeDefList = queryPluginManager.getTypeDefList();
    const mutationsSubTypeDefList = mutationPluginManager.getTypeDefList();
    const subscriptionsSubTypeDefList = subscriptionPluginManager.getTypeDefList();
    const resolverSubTypeDefList = resolverPluginManager.getTypeDefList();
    const resolversSubTypeDefList = resolversPluginManager.getTypeDefList();
    const interfaceSubTypeDefList = interfacePluginManager.getTypeDefList();
    const subTypeDefs = joinDistinct([
        queriesSubTypeDefList,
        mutationsSubTypeDefList,
        subscriptionsSubTypeDefList,
        resolverSubTypeDefList,
        resolversSubTypeDefList,
        interfaceSubTypeDefList,
        enumDefinitions.typeDefs,
    ]);
    const typeDefs = queryDefinition.typeDef +
        mutationDefinition.typeDef +
        subscriptionDefinition.typeDef +
        resolversDefinition.typeDef +
        scalarDefinition.typeDef +
        subTypeDefs;
    const resolvers = mergeResolvers(queryDefinition.resolvers, mutationDefinition.resolvers, subscriptionDefinition.resolvers, resolverDefinitions, resolversDefinition.resolvers, interfaceDefinitions, scalarDefinition.resolvers, enumDefinitions.values);
    return { typeDefs, resolvers };
}
exports.assembleSchemaData = assembleSchemaData;
function joinDistinct(typeDefLists) {
    const typeDefs = [];
    for (const list of typeDefLists) {
        for (const typeDef of list) {
            if (typeDefs.indexOf(typeDef) < 0) {
                typeDefs.push(typeDef);
            }
        }
    }
    return typeDefs.join('');
}
exports.joinDistinct = joinDistinct;
function mergeResolvers(...resolversArr) {
    const result = {};
    let Query;
    let Mutation;
    for (const resolverGroup of resolversArr) {
        if (resolverGroup.Query) {
            Query = Query || {};
            Object.assign(Query, resolverGroup.Query);
        }
        if (resolverGroup.Mutation) {
            Mutation = Mutation || {};
            Object.assign(Mutation, resolverGroup.Mutation);
        }
    }
    Object.assign(result, ...resolversArr, { Query, Mutation });
    return result;
}
exports.mergeResolvers = mergeResolvers;
//# sourceMappingURL=assembleSchema.js.map