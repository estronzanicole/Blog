"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const zox_plugins_1 = require("zox-plugins");
const TypeDefsPluginManager_1 = require("./TypeDefsPluginManager");
const pluginKey = Symbol('GraphQL Resolver Type');
class ResolveTypePluginManager extends TypeDefsPluginManager_1.TypeDefsPluginManager {
    get pluginKey() {
        return pluginKey;
    }
    getResolvers(options) {
        options = options || {};
        const resolvers = {};
        const resolverClassNames = {};
        for (const pluginDefinition of this.pluginDefinitions) {
            if (resolvers[pluginDefinition.data.name]) {
                console.warn(`Overriding type resolver for: ${pluginDefinition.data.name}
  new class: ${pluginDefinition.pluginClass.name}
  old class: ${resolverClassNames[pluginDefinition.data.name]}`);
            }
            const instance = new pluginDefinition.pluginClass();
            if (options.decorate) {
                options.decorate(instance);
            }
            resolvers[pluginDefinition.data.name] = instance.resolve.bind(instance);
            resolverClassNames[pluginDefinition.data.name] = pluginDefinition.pluginClass.name;
        }
        return resolvers;
    }
}
exports.ResolveTypePluginManager = ResolveTypePluginManager;
function ResolveType(name, typeDefs) {
    return zox_plugins_1.PluginSetup(pluginKey, { name, typeDefs });
}
exports.ResolveType = ResolveType;
//# sourceMappingURL=ResolveTypePluginManager.js.map