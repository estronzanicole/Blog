import { Constructor } from 'zox-plugins';
import { TypeDefsOptions, TypeDefsPluginManager } from './TypeDefsPluginManager';
import { ResolverBuildOptions } from './ResolverPluginManager';
import { Build } from './QueryPluginManager';
declare const queriesKey: unique symbol;
declare const mutationsKey: unique symbol;
declare const fieldsKey: unique symbol;
interface ResolversOptions extends TypeDefsOptions {
    type?: string;
}
export interface TypeResolverConstructor<T = any> {
    new (): T;
    prototype: TypeResolverPrototype;
}
export interface TypeResolverPrototype {
    [queriesKey]?: FieldDefinition[];
    [mutationsKey]?: FieldDefinition[];
    [fieldsKey]?: FieldDefinition[];
}
interface FieldDefinition {
    propertyKey: string;
    field: string;
}
export declare class ResolversPluginManager extends TypeDefsPluginManager<TypeResolverConstructor, ResolversOptions> {
    readonly pluginKey: symbol;
    getBuild(options?: ResolverBuildOptions): Build;
}
export declare function Resolvers(pluginClass: Constructor<any>): void;
export declare function Resolvers(options: ResolversOptions): (pluginClass: Constructor<any>) => void;
export declare function query(field: string): (target: any, propertyKey: string) => void;
export declare function mutation(field: string): (target: any, propertyKey: string) => void;
export declare function field(fieldName: string): (target: any, propertyKey: string) => void;
export declare function field(target: any, propertyKey: string): void;
export {};
