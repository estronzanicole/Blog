import { IPluginSource, PluginDefinition } from 'zox-plugins';
import { IClass, ResolverBuildOptions } from './ResolverPluginManager';
import { ValueNode } from 'graphql/language/ast';
import { Build } from './QueryPluginManager';
export interface ScalarOptions {
    name: string;
    description?: string;
    pure?: boolean;
}
export interface IScalar<P = any, S = any> {
    serialize(value: P): S | undefined | void;
    parseValue?(value: S): P | undefined | void;
    parseLiteral?(valueNode: ValueNode, variables?: {
        [p: string]: any;
    }): P | undefined | void;
}
export declare class ScalarPluginManager {
    protected readonly pluginDefinitions: Array<PluginDefinition<IClass<IScalar>, ScalarOptions>>;
    constructor(pluginDiscovery: IPluginSource);
    getBuild(options?: ResolverBuildOptions): Build;
}
export declare function Scalar(name: string, description?: string): (pluginClass: IClass<IScalar>) => void;
export declare function Scalar(pluginClass: IClass<IScalar>): void;
export declare function PureScalar(name: string, description?: string): (pluginClass: IClass<IScalar>) => void;
export declare function PureScalar(pluginClass: IClass<IScalar>): void;
