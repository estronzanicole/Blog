"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const zox_plugins_1 = require("zox-plugins");
const pluginKey = Symbol('GraphQL Enum Type');
class EnumPluginManager {
    constructor(pluginDiscovery) {
        this.pluginDefinitions = pluginDiscovery.getPlugins(pluginKey);
    }
    getEnumDefs(options) {
        options = options || {};
        const typeDefs = [];
        const values = {};
        for (const pluginDefinition of this.pluginDefinitions) {
            let mValues = pluginDefinition.pluginClass.values;
            if (!mValues) {
                const instance = new pluginDefinition.pluginClass();
                if (options.decorate) {
                    options.decorate(instance);
                }
                mValues = instance.values;
            }
            if (typeof mValues === 'object') {
                const name = pluginDefinition.data.name || pluginDefinition.pluginClass.name;
                values[name] = mValues;
                let typeDef = '';
                const keys = Object.getOwnPropertyNames(mValues);
                for (const key of keys) {
                    typeDef += key + '\n';
                }
                typeDef = `\n${pluginDefinition.data.description ? `#${pluginDefinition.data.description}\n` : ''}enum ${name}\n{\n${typeDef}}\n`;
                typeDefs.push(typeDef);
            }
            else {
                console.warn('Expected enum values to be an object but got:', mValues);
            }
        }
        return { typeDefs, values };
    }
}
exports.EnumPluginManager = EnumPluginManager;
function Enum(nameOrClass, description) {
    if (typeof nameOrClass === 'string') {
        return zox_plugins_1.PluginSetup(pluginKey, { name: nameOrClass, description });
    }
    zox_plugins_1.PluginSetup(pluginKey, { name: nameOrClass.name })(nameOrClass);
}
exports.Enum = Enum;
//# sourceMappingURL=EnumPluginManager.js.map