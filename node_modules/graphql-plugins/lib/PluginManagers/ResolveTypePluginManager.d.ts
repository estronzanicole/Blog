import { TypeDefsOptions, TypeDefsPluginManager } from './TypeDefsPluginManager';
import { GraphQLObjectType, GraphQLTypeResolver } from 'graphql/type/definition';
import { IClass, ResolverBuildOptions } from './ResolverPluginManager';
import Maybe from 'graphql/tsutils/Maybe';
import { GraphQLResolveInfo } from 'graphql';
export declare type MaybePromise<T> = T | Promise<T>;
export interface TypeResolverOptions extends TypeDefsOptions {
    name: string;
}
export interface IResolveType {
    resolve(value: any, context: any, info: GraphQLResolveInfo): MaybePromise<Maybe<GraphQLObjectType | string>>;
}
export declare class ResolveTypePluginManager extends TypeDefsPluginManager<IClass<IResolveType>, TypeResolverOptions> {
    readonly pluginKey: symbol;
    getResolvers(options?: ResolverBuildOptions): {
        [key: string]: GraphQLTypeResolver<any, any>;
    };
}
export declare function ResolveType(name: string, typeDefs?: string | Array<string>): (pluginClass: import("zox-plugins").Constructor<IResolveType>) => void;
