import { IResolvers } from '../Interfaces';
import { TypeDefsOptions, TypeDefsPluginManager } from './TypeDefsPluginManager';
import { GraphQLResolveInfo } from 'graphql';
export interface ResolverOptions extends TypeDefsOptions {
    type: string;
    field: string;
}
export interface ResolverBuildOptions {
    decorate?: (resolverClass: any) => void;
}
export interface IClass<T = any> {
    new (): T;
}
export interface IResolver {
    handle(source: any, args: any, context: any, info: GraphQLResolveInfo): any;
}
export declare class ResolverPluginManager extends TypeDefsPluginManager<IClass<IResolver>, ResolverOptions> {
    readonly pluginKey: symbol;
    getResolvers(options?: ResolverBuildOptions): IResolvers;
}
export declare function Resolver(type: string, field: string, typeDefs?: string | Array<string>): (pluginClass: import("zox-plugins").Constructor<IResolver>) => void;
