import { IPluginSource, PluginDefinition } from 'zox-plugins';
import { IClass, ResolverBuildOptions } from './ResolverPluginManager';
export interface EnumOptions {
    name: string;
    description?: string;
}
export interface EnumDefs {
    typeDefs: Array<string>;
    values: {
        [key: string]: IEnum;
    };
}
export declare type EnumClass<T extends Array<string> | Object = any> = IClass<IEnum> | (IClass & {
    values: T;
});
export interface IEnum<T extends Array<string> | Object = any> {
    readonly values: T;
}
export declare class EnumPluginManager {
    protected readonly pluginDefinitions: Array<PluginDefinition<EnumClass, EnumOptions>>;
    constructor(pluginDiscovery: IPluginSource);
    getEnumDefs(options?: ResolverBuildOptions): EnumDefs;
}
export declare function Enum(name: string, description?: string): (pluginClass: IClass<any>) => void;
export declare function Enum(pluginClass: IClass<any>): void;
