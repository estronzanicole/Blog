"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const zox_plugins_1 = require("zox-plugins");
const pluginKey = Symbol('GraphQL Resolver Type');
class ScalarPluginManager {
    constructor(pluginDiscovery) {
        this.pluginDefinitions = pluginDiscovery.getPlugins(pluginKey);
    }
    getBuild(options) {
        options = options || {};
        let typeDef = '';
        const resolvers = {};
        const resolverClassNames = {};
        for (const pluginDefinition of this.pluginDefinitions) {
            const name = pluginDefinition.data.name;
            const pure = pluginDefinition.data.pure;
            if (resolvers[name]) {
                console.warn(`Overriding scalar resolver for: ${name}
  new class: ${pluginDefinition.pluginClass.name}
  old class: ${resolverClassNames[name]}`);
            }
            const instance = new pluginDefinition.pluginClass();
            if (options.decorate) {
                options.decorate(instance);
            }
            resolvers[name] = {
                serialize: pure ? instance.serialize : instance.serialize.bind(instance),
            };
            if (instance.parseValue) {
                resolvers[name].parseValue = pure ? instance.parseValue : instance.parseValue.bind(instance);
            }
            if (instance.parseLiteral) {
                resolvers[name].parseLiteral = pure ? instance.parseLiteral : instance.parseLiteral.bind(instance);
            }
            resolverClassNames[name] = pluginDefinition.pluginClass.name;
            typeDef += `\n${pluginDefinition.data.description ? `#${pluginDefinition.data.description}\n` : ''}scalar ${name}\n`;
        }
        return {
            typeDef,
            resolvers,
        };
    }
}
exports.ScalarPluginManager = ScalarPluginManager;
function Scalar(nameOrClass, description) {
    if (typeof nameOrClass === 'string') {
        return zox_plugins_1.PluginSetup(pluginKey, { name: nameOrClass, description });
    }
    zox_plugins_1.PluginSetup(pluginKey, { name: nameOrClass.name })(nameOrClass);
}
exports.Scalar = Scalar;
function PureScalar(nameOrClass, description) {
    if (typeof nameOrClass === 'string') {
        return zox_plugins_1.PluginSetup(pluginKey, { name: nameOrClass, description, pure: true });
    }
    zox_plugins_1.PluginSetup(pluginKey, { name: nameOrClass.name, pure: true })(nameOrClass);
}
exports.PureScalar = PureScalar;
//# sourceMappingURL=ScalarPluginManager.js.map