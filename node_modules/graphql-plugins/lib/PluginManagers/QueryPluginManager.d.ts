import { IResolvers } from '../Interfaces';
import { TypeDefsOptions, TypeDefsPluginManager } from './TypeDefsPluginManager';
import { ISubscriptionResolver } from '../SubscriptionResolver';
import { IClass, IResolver, ResolverBuildOptions } from './ResolverPluginManager';
export interface QueryOptions extends TypeDefsOptions {
    field: string;
}
export interface Build {
    typeDef: string;
    resolvers: IResolvers;
}
export declare abstract class QueryPluginManagerBase<TResolver> extends TypeDefsPluginManager<IClass<TResolver>, QueryOptions> {
    protected abstract type: string;
    getBuild(options?: ResolverBuildOptions): Build;
    protected abstract getResolver(instance: TResolver): any;
}
export declare class QueryPluginManager extends QueryPluginManagerBase<IResolver> {
    protected type: string;
    protected readonly pluginKey: symbol;
    protected getResolver(instance: IResolver): any;
}
export declare class MutationPluginManager extends QueryPluginManager {
    protected type: string;
    protected readonly pluginKey: symbol;
}
export declare class SubscriptionPluginManager extends QueryPluginManagerBase<ISubscriptionResolver> {
    protected type: string;
    protected readonly pluginKey: symbol;
    protected getResolver(instance: ISubscriptionResolver): {
        subscribe: any;
        resolve: any;
    };
}
export declare function Query(field: string, typeDefs?: string | Array<string>): (pluginClass: import("zox-plugins").Constructor<IResolver>) => void;
export declare function Mutation(field: string, typeDefs?: string | Array<string>): (pluginClass: import("zox-plugins").Constructor<IResolver>) => void;
export declare function Subscription(field: string, typeDefs?: string | Array<string>): (pluginClass: import("zox-plugins").Constructor<ISubscriptionResolver<any, any>>) => void;
