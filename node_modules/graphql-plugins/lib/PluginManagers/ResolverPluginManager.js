"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const zox_plugins_1 = require("zox-plugins");
const TypeDefsPluginManager_1 = require("./TypeDefsPluginManager");
const pluginKey = Symbol('GraphQL Resolver');
class ResolverPluginManager extends TypeDefsPluginManager_1.TypeDefsPluginManager {
    get pluginKey() {
        return pluginKey;
    }
    getResolvers(options) {
        options = options || {};
        const resolvers = {};
        const resolverClassNames = {};
        for (const pluginDefinition of this.pluginDefinitions) {
            if (!resolvers[pluginDefinition.data.type]) {
                resolvers[pluginDefinition.data.type] = {};
                resolverClassNames[pluginDefinition.data.type] = {};
            }
            if (resolvers[pluginDefinition.data.type][pluginDefinition.data.field]) {
                console.warn(`Overriding field: ${pluginDefinition.data.type}.${pluginDefinition.data.field}
  new class: ${pluginDefinition.pluginClass.name}
  old class: ${resolverClassNames[pluginDefinition.data.type][pluginDefinition.data.field]}`);
            }
            const instance = new pluginDefinition.pluginClass();
            if (options.decorate) {
                options.decorate(instance);
            }
            resolvers[pluginDefinition.data.type][pluginDefinition.data.field] = instance.handle.bind(instance);
            resolverClassNames[pluginDefinition.data.type][pluginDefinition.data.field] = pluginDefinition.pluginClass.name;
        }
        return resolvers;
    }
}
exports.ResolverPluginManager = ResolverPluginManager;
function Resolver(type, field, typeDefs) {
    return zox_plugins_1.PluginSetup(pluginKey, { type, field, typeDefs });
}
exports.Resolver = Resolver;
//# sourceMappingURL=ResolverPluginManager.js.map