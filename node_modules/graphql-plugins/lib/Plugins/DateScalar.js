"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const ScalarPluginManager_1 = require("../PluginManagers/ScalarPluginManager");
const graphql_1 = require("graphql");
let DateScalar = class DateScalar {
    serialize(value) {
        return value.toUTCString();
    }
    parseValue(value) {
        if (typeof value === 'string') {
            return new Date(value);
        }
    }
    parseLiteral(valueNode, variables) {
        if (valueNode.kind === graphql_1.Kind.STRING) {
            const result = new Date(valueNode.value);
            if (isNaN(result.getTime())) {
                throw new TypeError('Invalid date');
            }
            if (valueNode.value !== result.toUTCString()) {
                throw new TypeError('Invalid date format, only accepts: YYYY-MM-DDTHH:mm:ss.sssZ or Â±YYYYYY-MM-DDTHH:mm:ss.sssZ');
            }
            return result;
        }
    }
};
DateScalar = __decorate([
    ScalarPluginManager_1.PureScalar('Date')
], DateScalar);
exports.DateScalar = DateScalar;
//# sourceMappingURL=DateScalar.js.map